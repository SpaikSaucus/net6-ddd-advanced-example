// <auto-generated />
using System;
using AuthorizationOperation.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthorizationOperation.Infrastructure.EF.Migrations
{
    [DbContext(typeof(AuthorizationDbContext))]
    [Migration("20231016184132_AuthorizationAddUUID")]
    partial class AuthorizationAddUUID
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AuthorizationOperation.Domain.Authorization.Models.Authorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("customer");

                    b.Property<ushort>("StatusId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("status_id");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_authorization_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_authorization_status_id");

                    b.ToTable("authorization", (string)null);
                });

            modelBuilder.Entity("AuthorizationOperation.Domain.Authorization.Models.AuthorizationStatus", b =>
                {
                    b.Property<ushort>("Id")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_authorization_status_id");

                    b.ToTable("authorization_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (ushort)1,
                            Name = "WAITING_FOR_SIGNERS"
                        },
                        new
                        {
                            Id = (ushort)2,
                            Name = "AUTHORIZED"
                        },
                        new
                        {
                            Id = (ushort)3,
                            Name = "EXPIRED"
                        },
                        new
                        {
                            Id = (ushort)4,
                            Name = "CANCELLED"
                        });
                });

            modelBuilder.Entity("AuthorizationOperation.Domain.User.Models.User", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.HasKey("UUID")
                        .HasName("pk_user_uuid");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("AuthorizationOperation.Domain.Authorization.Models.Authorization", b =>
                {
                    b.HasOne("AuthorizationOperation.Domain.Authorization.Models.AuthorizationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_authorization_authorization_status_status_id");

                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
